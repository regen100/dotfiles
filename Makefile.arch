SHELL := bash
MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
DOTFILES_DIR := $(dir $(MAKEFILE_PATH))
PKG-INSTALL := yay --noconfirm --needed -S
PIP-INSTALL := python3 -m pip install --user --no-warn-script-location -U
STOW-INSTALL := stow -d $(DOTFILES_DIR) -t $(HOME)

.PHONY: system
system: repo
	@sudo sed -E 's/^#(en_US|ja_JP)\.UTF-8/\1.UTF-8/' -i /etc/locale.gen && sudo locale-gen
	@sudo echo LANG=en_US.UTF-8 | sudo tee /etc/locale.conf
	@sudo timedatectl set-ntp true
	@$(PKG-INSTALL) base-devel openssh xorg-xauth systemd-boot-pacman-hook earlyoom
	@sudo sed -i 's/#X11Forwarding .*/X11Forwarding yes/' /etc/ssh/sshd_config
	@sudo systemctl --now enable sshd
	@sudo systemctl --now enable fstrim.timer
	@sudo systemctl --now enable earlyoom

.PHONY: wsl
wsl: repo
	@$(PKG-INSTALL) openssh xorg-xauth unzip
	@touch ~/.Xauthority
	@mkdir /tmp/win32yank; curl -sSL https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip -o /tmp/win32yank/win32yank.zip
	@cd /tmp/win32yank; unzip win32yank.zip; chmod +x win32yank.exe; mkdir -p ~/bin; mv win32yank.exe ~/bin; rm -rf /tmp/win32yank

.PHONY: repo
repo:
	@sudo sed -e 's/^#ParallelDownloads/ParallelDownloads/' -i /etc/pacman.conf
	@if ! which yay >/dev/null; then \
		cd /tmp; \
		git clone https://aur.archlinux.org/yay-bin.git; \
		cd yay-bin; \
		makepkg --noconfirm -si; \
		rm -rf /tmp/yay-bin; \
	fi
	@mkdir -p ~/.config
	@if systemctl >/dev/null 2>&1 && ! systemctl is-active --quiet reflector.timer; then \
		$(PKG-INSTALL) reflector; \
		sudo sed -i "s/^--protocol https$$/--protocol https --protocol http --protocol ftp/" /etc/xdg/reflector/reflector.conf; \
		sudo sed -i "s/^# --country France,Germany$$/--country Japan/" /etc/xdg/reflector/reflector.conf; \
		sudo systemctl enable --now reflector.timer; \
		sudo systemctl start reflector; \
	fi
	@$(PKG-INSTALL) stow
	@$(STOW-INSTALL) pacman

.PHONY: informant
informant: repo
	@$(PKG-INSTALL) informant && sudo usermod -a -G informant $$USER

.PHONY: pip
pip: repo
	@$(PKG-INSTALL) python python-pip python-wheel

.PHONY: utils
utils: repo
	@$(PKG-INSTALL) man rsync htop direnv ripgrep pkgfile duf ncdu fzf bat bandwhich needrestart ghq-bin
	@$(STOW-INSTALL) direnv
	@sudo pkgfile --update

.PHONY: git
git: repo
	@$(PKG-INSTALL) git git-lfs git-extras-git tig git-delta
	@$(STOW-INSTALL) git tig
	@[[ -f ~/.gitconfig ]] || touch ~/.gitconfig
	@if ! grep "\~/\.gitconfig_global" ~/.gitconfig >/dev/null; then \
		echo "[include]" >> ~/.gitconfig; \
		echo "	path = ~/.gitconfig_global" >> ~/.gitconfig; \
	fi

.PHONY: efm
efm: repo
	@$(PKG-INSTALL) efm-langserver shellcheck hadolint-bin
	@$(STOW-INSTALL) efm

.PHONY: nvim
nvim: repo git utils efm
	@sudo pacman --noconfirm -R vi 2>/dev/null || true
	@$(PKG-INSTALL) neovim xclip wl-clipboard neovim-drop-in xxd-standalone lua-language-server stylua luacheck vim-language-server python-neovim
	@$(STOW-INSTALL) nvim
	@tic -x $(DOTFILES_DIR)/.extras/terminfo

.PHONY: clang
clang: repo pip
	@$(PKG-INSTALL) cmake ninja clang openmp cppcheck sccache cmake-lint lldb
	@$(STOW-INSTALL) clang
	@$(PIP-INSTALL) cmake-language-server

.PHONY: python
python: repo readline
	@$(PKG-INSTALL) poetry

.PHONY: nodejs
nodejs: repo
	@$(PKG-INSTALL) nodejs npm

.PHONY: rust
rust: repo
	@$(PKG-INSTALL) rustup sccache
	@rustup update stable
	@rustup component add rust-src rustfmt-preview clippy rls rust-analysis
	@$(STOW-INSTALL) rust

.PHONY: plantuml
plantuml: repo
	@$(PKG-INSTALL) jdk-openjdk plantuml

.PHONY: latex
latex: repo font
	@$(PKG-INSTALL) texlive-most texlive-langjapanese qpdfview poppler-data
	@kanji-config-updmap-sys auto

.PHONY: tmux-patch
tmux-patch: repo
	@git clone https://git.archlinux.org/svntogit/community.git --single-branch -b packages/tmux /tmp/arch
	@sed -i "s#source=(#source=('https://github.com/z80oolong/tmux-eaw-fix/archive/master.zip' #; s/sha256sums=(/sha256sums=('SKIP' /" /tmp/arch/trunk/PKGBUILD
	@echo -e 'prepare() {\ncd "$$srcdir/$$pkgname-$${pkgver/_/}"; patch -Np1 -i "$$srcdir/tmux-eaw-fix-master/$$pkgname-$${pkgver/_/}-fix.diff"\n}' >> /tmp/arch/trunk/PKGBUILD
	@cd /tmp/arch/trunk; makepkg --noconfirm -si
	@rm -rf /tmp/arch

.PHONY: tmux
tmux: repo
	@$(PKG-INSTALL) tmux sysstat lm_sensors
	@$(STOW-INSTALL) tmux

.PHONY: zsh
zsh: repo readline utils
	@$(PKG-INSTALL) zsh grml-zsh-config zsh-completions zsh-syntax-highlighting zsh-autosuggestions zsh-manydots-magic keychain starship
	@mkdir -p ~/bin
	@$(STOW-INSTALL) zsh starship
	@mkdir -p ~/.zfunc

.PHONY: xrdp
xrdp: repo
	@$(PKG-INSTALL) xrdp xorgxrdp-git

.PHONY: font
font: repo
	@$(PKG-INSTALL) noto-fonts noto-fonts-cjk noto-fonts-emoji ttf-times-new-roman ttf-hackgen
	@$(STOW-INSTALL) font

.PHONY: verilog
verilog: repo git
	@$(PKG-INSTALL) iverilog gtkwave
	@if ! which iStyle >/dev/null; then \
		cd /tmp; \
		git clone -b v1.21 https://github.com/thomasrussellmurphy/istyle-verilog-formatter.git; \
		cd istyle-verilog-formatter; \
		make; \
		cp bin/release/iStyle /usr/local/bin; \
		rm -rf $$(pwd); \
	fi

.PHONY: docker
docker: repo
	@$(PKG-INSTALL) docker docker-compose
	@sudo gpasswd -a $$USER docker
	@sudo systemctl enable --now docker

.PHONY: fcitx
fcitx: repo
	@$(PKG-INSTALL) fcitx-mozc fcitx-configtool fcitx-im

.PHONY: xfce
xfce: repo fcitx
	@$(PKG-INSTALL) xorg-server xfce4 xfce4-goodies gvfs gvfs-smb sshfs lightdm lightdm-gtk-greeter light-locker numlockx archlinux-artwork archlinux-wallpaper accountsservice file-roller p7zip
	@xfconf-query -c xfce4-session -p /general/LockCommand -s "light-locker-command -l" --create -t string
	@sudo sed -ie "s@^#greeter-setup-script=@greeter-setup-script=/usr/bin/numlockx on@" /etc/lightdm/lightdm.conf
	@sudo mkdir -p /etc/systemd/system/lightdm.service.d
	@echo -e "[Service]\nEnvironment=LANG=ja_JP.utf8" | sudo tee /etc/systemd/system/lightdm.service.d/override.conf >/dev/null
	@sudo cp -f $(DOTFILES_DIR)/.extras/lightdm/lightdm-gtk-greeter.conf /etc/lightdm
	@sudo localectl set-x11-keymap jp,us
	@sudo systemctl enable --now lightdm
	@$(STOW-INSTALL) xprofile

.PHONY: nftables
nftables: repo
	@$(PKG-INSTALL) nftables
	@sudo systemctl enable --now nftables

.PHONY: doxygen
doxygen: repo plantuml
	@$(PKG-INSTALL) doxygen dot texlive-core texlive-bin

.PHONY: k8s
k8s: repo
	@$(PKG-INSTALL) kubernetes-bin argo-bin jsonnet

.PHONY: code
code: repo nvim font
	@$(PKG-INSTALL) visual-studio-code-insiders-bin gnome-keyring

.PHONY: readline
readline: repo
	@$(STOW-INSTALL) readline

.PHONY: borg
borg: repo
	@$(PKG-INSTALL) borg
	@$(STOW-INSTALL) borg

.PHONY: gpg
gpg: repo
	@$(PKG-INSTALL) pinentry qt5-base
	@grep -q pinentry-program $$HOME/.gnupg/gpg-agent.conf || echo "pinentry-program /usr/bin/pinentry-qt" >$$HOME/.gnupg/gpg-agent.conf
	@gpg-connect-agent reloadagent /bye >/dev/null

.PHONY: wpa
wpa: repo
	@$(PKG-INSTALL) wpa_supplicant
	@sudo sh -c 'printf "ctrl_interface=/run/wpa_supplicant\nupdate_config=1\n" >/etc/wpa_supplicant/wpa_supplicant.conf'
	@echo see https://wiki.archlinux.jp/index.php/Wpa_supplicant

.PHONY: remote_luks
remote_luks: repo
	@$(PKG-INSTALL) mkinitcpio-netconf mkinitcpio-tinyssh mkinitcpio-utils
	@sudo cp $$HOME/.ssh/authorized_keys /etc/tinyssh/root_key
	@sudo sed -i "s/encrypt filesystems/netconf tinyssh encryptssh filesystems/" /etc/mkinitcpio.conf
	@echo see https://wiki.archlinux.jp/index.php/Dm-crypt/%E7%89%B9%E8%A8%98%E4%BA%8B%E9%A0%85

.PHONY: network
network:
	@sudo sed -i "s/^#MulticastDNS=yes/MulticastDNS=yes/" /etc/systemd/resolved.conf
	@sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
	@sudo systemctl enable --now systemd-networkd systemd-resolved

.PHONY: aws
aws:
	@$(PKG-INSTALL) awscli amazon-ecr-credential-helper

.PHONY: terraform
terraform:
	@$(PKG-INSTALL) terraform terraform-ls tflint-bin
