# syntax {{{
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add='''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_member_variable_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:cpp_experimental_simple_template_highlight = 1
  let g:cpp_concepts_highlight = 1
  let g:cpp_no_function_highlight = 1

  let g:vim_json_syntax_conceal = 0

  let g:vim_markdown_conceal = 0

  autocmd vimrc BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
'''

[[plugins]]
repo = 'anntzer/vim-cython'

[[plugins]]
repo = 'vhda/verilog_systemverilog.vim'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'tmhedberg/SimpylFold'
# }}}

# java {{{
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_add = '''
  let g:JavaComplete_UsePython3 = 1
  autocmd vimrc FileType java setlocal omnifunc=javacomplete#Complete
'''
# }}}

# latex {{{
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['bib', 'tex']
hook_add='''
  let g:vimtex_compiler_latexmk = {
    \ 'continuous' : 1,
    \ 'options' : [
    \   '-pdfdvi',
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}

  if executable('qpdfview')
    let g:vimtex_view_general_viewer = 'qpdfview'
    let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
    let g:vimtex_view_general_options_latexmk = '--unique'
  endif
'''
# }}}

# doc {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
type__depth = 1
hook_add = '''
  set helplang=ja,en
'''
# }}}

# appearance {{{
[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#filetypes')
    let g:context_filetype#filetypes = {}
  endif
  let g:context_filetype#filetypes.gdb = [{'filetype': 'python', 'start' : '^python$', 'end' : '^end$'}]
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeRespectWildIgnore = 1
  nnoremap <silent> <Leader>n :<C-u>NERDTreeToggle<CR>
  autocmd vimrc BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_fileTypeExclude = ['help', 'tagbar', 'git', '']
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
  endfunction

  let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'component_expand': {
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok',
  \   'buffers': 'lightline#bufferline#buffers',
  \ },
  \ 'component_type': {
  \   'linter_checking': 'left',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left',
  \   'buffers': 'tabsel',
  \ },
  \ 'component': {
  \   'filename_readonly_modified': '%t' . '%{&readonly ? "\ue0a2" : ""}' . '%m',
  \   'lineinfo_percent': '%3p%% %3l:%-2v',
  \   'tagbar': '%{winwidth(0) > 100 ? tagbar#currenttag("%s", "", "f"): ""}',
  \   'lightline_hunks': '%{winwidth(0) > 100 ? lightline#hunks#composer() : ""}',
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction'
  \ },
  \ 'active': {
  \   'left': [['mode', 'paste'], ['lightline_hunks'], ['filename_readonly_modified'], ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'], ['tagbar']],
  \   'right': [['lineinfo_percent'], ['fileformat', 'fileencoding', 'filetype']]
  \ },
  \ 'tabline': {'left': [['buffers']], 'right': [['close']]},
  \}

  set showtabline=2
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = '''
  let g:lightline#ale#indicator_checking = "\uf110"
  let g:lightline#ale#indicator_warnings = "\uf071"
  let g:lightline#ale#indicator_errors = "\uf05e"
  let g:lightline#ale#indicator_ok = "\uf00c"
'''

[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
hook_add = '''
  let g:lightline#bufferline#show_number = 1
'''

[[plugins]]
repo = 'sinetoami/lightline-hunks'
hook_add = '''
  let g:lightline#hunks#exclude_filetypes = ['help', 'nerdtree', 'tagbar']
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  autocmd vimrc VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'lilydjwg/colorizer'

[[plugins]]
repo = 'junegunn/rainbow_parentheses.vim'
on_ft = ['cpp']
hook_source = '''
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
  autocmd vimrc VimEnter * RainbowParentheses
'''

[[plugins]]
repo = 'thinca/vim-zenspace'
# }}}

# git {{{
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'
# }}}

# editor {{{
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  inoremap <silent><expr> <c-space> coc#refresh()

  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  autocmd vimrc FileType c,cpp,objc,objcpp,cs,go,javascript,python,rust nmap <buffer> <silent> <CR> <Plug>(coc-definition)
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  autocmd CursorHold * silent call CocActionAsync('highlight')

  nmap <leader>cr <Plug>(coc-rename)
  xmap <silent> <leader>cf <Plug>(coc-format-selected)
  nmap <silent> <leader>cf <Plug>(coc-format-selected)

  nnoremap <silent> <leader>ca :<C-u>CocList diagnostics<cr>
  nnoremap <silent> <leader>ce :<C-u>CocList extensions<cr>
  nnoremap <silent> <leader>cc :<C-u>CocList commands<cr>
  nnoremap <silent> <leader>co :<C-u>CocList outline<cr>
  nnoremap <silent> <leader>cs :<C-u>CocList -I symbols<cr>

  inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  let g:coc_snippet_next = '<tab>'
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_width = 30
  let g:tagbar_show_visibility = 1
  let g:tagbar_type_bib = {
    \ 'ctagstype' : 'bib',
    \ 'kinds'     : [
      \ 'a:Articles',
      \ 'b:Books',
      \ 'L:Booklets',
      \ 'c:Conferences',
      \ 'B:Inbook',
      \ 'C:Incollection',
      \ 'P:Inproceedings',
      \ 'm:Manuals',
      \ 'T:Masterstheses',
      \ 'M:Misc',
      \ 't:Phdtheses',
      \ 'p:Proceedings',
      \ 'r:Techreports',
      \ 'u:Unpublished',
    \ ]
  \ }
  function! s:nop()
  endfunction
  augroup TagbarProjects
    autocmd!
    autocmd User * call s:nop()
    autocmd User dein.toml let b:tagbar_type = {
      \ 'ctagstype' : 'dein',
      \ 'kinds'     : [
        \ 'r:Repo',
      \ ]
    \ }
  augroup END
  nnoremap <silent> <LEADER>t :<C-u>TagbarToggle<CR>
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd vimrc BufWritePre * FixWhitespace
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_cpp_clangcheck_options='-extra-arg=-D__clang_analyzer__ -extra-arg=-fno-color-diagnostics'
  let g:ale_cpp_cppcheck_options='--enable=all --suppress=unusedFunction --suppress=syntaxError'
  let g:ale_cpp_clangtidy_checks=[]
  let g:ale_c_clangformat_options = '-fallback-style=Google -style=file'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_fix_on_save = 1
  let g:ale_linters = { 'cpp': ['clangcheck', 'clangtidy_h', 'cppcheck', 'cpplint', 'clang-format'] }
  let g:ale_fixers = {
  \ 'cpp': ['clang-format'],
  \ 'qml': ['qmlfmt'],
  \ 'verilog': [
  \   {buffer, lines -> {'command': 'iStyle --style=ansi -s2 -p -n %t', 'read_temporary_file': 1}}
  \ ]
  \}
  let g:ale_fixers.verilog_systemverilog = g:ale_fixers.verilog
  let g:ale_linter_aliases = {
  \ 'verilog_systemverilog': ['verilog']
  \}
  autocmd vimrc FileType cpp if exists('g:build_dir') | let g:ale_c_build_dir = g:build_dir | endif
  nmap [w <Plug>(ale_previous_wrap)
  nmap ]w <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
  let g:easy_align_delimiters = {'t': {'pattern': "\<tab>", 'left_margin': 0, 'right_margin': 0}}
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
  autocmd vimrc FileType python nnoremap <buffer> @p :T python3 %<CR><Ctrl-W>j
'''

[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
  let g:localvimrc_persistent = 1
'''

[[plugins]]
repo = 'tyru/caw.vim'
merged = 0

[[plugins]]
repo = 'junegunn/fzf'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  noremap <Leader>e :<C-u>Files<CR>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'ciaranm/detectindent'
hook_add = '''
  let g:detectindent_preferred_expandtab = 1
  "autocmd vimrc BufReadPost * DetectIndent
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_use_migemo = 1
'''

[[plugins]]
repo = 'lilydjwg/fcitx.vim'
on_if = '$USER !=# "root" && !empty(glob("/tmp/fcitx-socket-*")) && $DISPLAY ==# ":0"'

[[plugins]]
repo = 'vim-scripts/restore_view.vim'
hook_add = '''
  set viewoptions=cursor,folds,slash,unix
'''

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>'
hook_add = '''
  nmap <Leader>a <Plug>(altr-forward)
  nmap <Leader>A <Plug>(altr-back)
'''
hook_post_source = '''
  call altr#define('%/include/%.hpp', '%/include/*/%.hpp', '%/include/*/*/%.hpp', '%/include/*/*/%.inl.hpp', '%/src/%.hpp', '%/src/%.h', '%/src/%.cpp', '%/test/%Test.cpp', '%/test/%_test.cpp', '%/test/%.cpp')
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
  let g:gutentags_ctags_exclude = ['build/*']
'''

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger = '<C-S>'
  let g:UltiSnipsJumpForwardTrigger = ']s'
  let g:UltiSnipsJumpBackwardTrigger = '[s'
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = ['<C-A>', '<C-X>']

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = '.'

[[plugins]]
repo = 'johnsyweb/vim-makeshift'

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
on_ft = ['c', 'cpp', 'python']

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']
hook_add = '''
  let g:gundo_close_on_revert = 1
  let g:gundo_auto_preview = 0
  let g:gundo_prefer_python3 = 1
  nnoremap <Leader>u :<C-u>GundoToggle<CR>
'''

[[plugins]]
repo = 'romainl/vim-qf'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'Valloric/ListToggle'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = '<Plug>'
hook_add = '''
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
'''
# }}}
